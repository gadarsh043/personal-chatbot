#!/usr/bin/env python3
"""
Demo script for Enhanced AI Chatbot with 2-way Learning
Shows how to set up and use the system with DeepSeek AI and Firebase
"""

import os
from chatbot import chatbot

def print_banner():
    print("ðŸ¤–" + "="*60 + "ðŸ¤–")
    print("    Enhanced AI Chatbot - 2-Way Learning Demo")
    print("ðŸ¤–" + "="*60 + "ðŸ¤–")
    print()

def print_system_status():
    print("ðŸ“Š System Status:")
    print(f"  âœ… Resume Data: {'Loaded' if chatbot.resume else 'Missing'}")
    print(f"  ðŸ”¥ Firebase: {'Connected' if chatbot.firebase_db else 'Not configured'}")
    print(f"  ðŸ¤– DeepSeek AI: {'Configured' if chatbot.deepseek_api_key else 'Not configured'}")
    print(f"  ðŸ“š Learned Q&A: {len(chatbot.learned_qa)} pairs loaded")
    print()

def demo_conversation():
    print("ðŸ’¬ Demo Conversation:")
    print("-" * 40)
    
    # Test questions
    questions = [
        "What are your skills?",
        "Tell me about your projects",
        "What motivates you?",
        "What is your favorite programming paradigm?",  # Unknown question
        "How do you handle stress?",  # Unknown question
    ]
    
    for i, question in enumerate(questions, 1):
        print(f"\n{i}. User: {question}")
        response = chatbot.get_response(question)
        
        # Truncate long responses for demo
        if len(response) > 150:
            response = response[:150] + "..."
        
        print(f"   Bot: {response}")
        
        # Show if this was AI-generated
        if "AI-generated" in response:
            print("   ðŸ’¡ This response was generated by AI and saved for future learning!")

def show_setup_instructions():
    print("\nðŸš€ Setup Instructions:")
    print("-" * 40)
    print("1. Get DeepSeek AI API Key:")
    print("   - Visit: https://platform.deepseek.com/")
    print("   - Create account and get API key")
    print("   - Check credits: https://platform.deepseek.com/usage")
    print()
    print("2. Set up Firebase (optional):")
    print("   - Visit: https://console.firebase.google.com/")
    print("   - Create project and enable Firestore")
    print("   - Download service account key")
    print()
    print("3. Configure environment:")
    print("   - Create .env file with:")
    print("     DEEPSEEK_API_KEY=your_api_key")
    print("     FIREBASE_KEY_PATH=firebase-key.json")
    print()
    print("4. Run the system:")
    print("   - Main app: python app.py")
    print("   - Admin panel: python admin.py")

def show_features():
    print("\nâœ¨ Key Features:")
    print("-" * 40)
    print("ðŸ§  2-Way Learning:")
    print("  - Learns from new questions automatically")
    print("  - Saves AI responses for future use")
    print("  - Improves over time through admin review")
    print()
    print("ðŸ¤– AI Integration:")
    print("  - Uses DeepSeek AI for unknown questions")
    print("  - Builds context from resume.yaml")
    print("  - Generates personality-driven responses")
    print()
    print("ðŸ”¥ Firebase Storage:")
    print("  - Persists learned Q&A across sessions")
    print("  - Tracks AI-generated vs manual responses")
    print("  - Enables review and editing workflow")
    print()
    print("ðŸŽ¨ Portfolio Integration:")
    print("  - Embeddable widget for websites")
    print("  - Matches your portfolio colors")
    print("  - Professional recruiter-friendly interface")

def main():
    print_banner()
    print_system_status()
    demo_conversation()
    show_features()
    show_setup_instructions()
    
    print("\nðŸŽ¯ Next Steps:")
    print("-" * 40)
    print("1. Set up DeepSeek AI API key for intelligent responses")
    print("2. Configure Firebase for persistent learning")
    print("3. Deploy to Vercel for production use")
    print("4. Embed widget on your portfolio website")
    print()
    print("ðŸ“– See SETUP_GUIDE.md for detailed instructions")
    print("ðŸ”§ See admin.py for Q&A management interface")
    print()
    print("Happy chatting! ðŸš€")

if __name__ == "__main__":
    main() 